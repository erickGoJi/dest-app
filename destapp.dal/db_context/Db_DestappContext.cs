// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
using System;
using destapp.biz.Entities;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;

namespace destapp.dal.db_context
{
    public partial class Db_DestappContext : DbContext
    {
        public Db_DestappContext()
        {
        }

        public Db_DestappContext(DbContextOptions<Db_DestappContext> options)
            : base(options)
        {
        }

        public virtual DbSet<BrandsProduct> BrandsProducts { get; set; }
        public virtual DbSet<CatalogoJuego> CatalogoJuegos { get; set; }
        public virtual DbSet<CatalogoJuegosImagene> CatalogoJuegosImagenes { get; set; }
        public virtual DbSet<CatalogoJuegosThumbnail> CatalogoJuegosThumbnails { get; set; }
        public virtual DbSet<CitiesState> CitiesStates { get; set; }
        public virtual DbSet<CoinsUser> CoinsUsers { get; set; }
        public virtual DbSet<CoinsUserHistory> CoinsUserHistories { get; set; }
        public virtual DbSet<DatosUsuario> DatosUsuarios { get; set; }
        public virtual DbSet<EstadosPai> EstadosPais { get; set; }
        public virtual DbSet<ExchangeProductHistory> ExchangeProductHistories { get; set; }
        public virtual DbSet<GenderDb> GenderDbs { get; set; }
        public virtual DbSet<GustosUsuario> GustosUsuarios { get; set; }
        public virtual DbSet<IntentosTrivium> IntentosTrivia { get; set; }
        public virtual DbSet<InteresesTrivia> InteresesTrivias { get; set; }
        public virtual DbSet<InterestReward> InterestRewards { get; set; }
        public virtual DbSet<JuegosBigScoreUsuarioPartidum> JuegosBigScoreUsuarioPartida { get; set; }
        public virtual DbSet<JuegosUsuariosPartida> JuegosUsuariosPartidas { get; set; }
        public virtual DbSet<LogrosUsuario> LogrosUsuarios { get; set; }
        public virtual DbSet<Notification> Notifications { get; set; }
        public virtual DbSet<Product> Products { get; set; }
        public virtual DbSet<ProductCategory> ProductCategories { get; set; }
        public virtual DbSet<RecompensasTriviasHistorial> RecompensasTriviasHistorials { get; set; }
        public virtual DbSet<RespuestasIntentoTrivium> RespuestasIntentoTrivia { get; set; }
        public virtual DbSet<ScannCodebarHistory> ScannCodebarHistories { get; set; }
        public virtual DbSet<ScannImgHistory> ScannImgHistories { get; set; }
        public virtual DbSet<Session> Sessions { get; set; }
        public virtual DbSet<TicketsUser> TicketsUsers { get; set; }
        public virtual DbSet<TicketsUserHistory> TicketsUserHistories { get; set; }
        public virtual DbSet<TypeEventScannImg> TypeEventScannImgs { get; set; }
        public virtual DbSet<TypeTransactionCatalog> TypeTransactionCatalogs { get; set; }
        public virtual DbSet<UsersMessage> UsersMessages { get; set; }

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured)
            {
            }
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.HasAnnotation("ProductVersion", "2.2.0-rtm-35687");

            modelBuilder.Entity<BrandsProduct>(entity =>
            {
                entity.ToTable("brands_product");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasColumnName("description")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<CatalogoJuego>(entity =>
            {
                entity.ToTable("catalogo_juegos");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Coins).HasColumnName("coins");

                entity.Property(e => e.CreatedAt)
                    .HasColumnName("created_at")
                    .HasColumnType("datetime");

                entity.Property(e => e.CreatedBy).HasColumnName("created_by");

                entity.Property(e => e.CreatedOn)
                    .HasColumnName("created_on")
                    .HasColumnType("datetime");

                entity.Property(e => e.EndDate)
                    .HasColumnName("end_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.IdCms).HasColumnName("idCMS");

                entity.Property(e => e.ModifiedAt)
                    .HasColumnName("modified_at")
                    .HasColumnType("datetime");

                entity.Property(e => e.ModifiedBy).HasColumnName("modified_by");

                entity.Property(e => e.ModifiedOn)
                    .HasColumnName("modified_on")
                    .HasColumnType("datetime");

                entity.Property(e => e.StartDate)
                    .HasColumnName("start_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.Status)
                    .HasColumnName("status")
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.Title)
                    .IsRequired()
                    .HasColumnName("title")
                    .HasMaxLength(250)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<CatalogoJuegosImagene>(entity =>
            {
                entity.ToTable("catalogo_juegos_imagenes");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.CreatedAt)
                    .HasColumnName("created_at")
                    .HasColumnType("date");

                entity.Property(e => e.FullUrl)
                    .HasColumnName("full_url")
                    .HasMaxLength(250);

                entity.Property(e => e.IdJuego).HasColumnName("id_juego");

                entity.Property(e => e.ModifiedAt)
                    .HasColumnName("modified_at")
                    .HasColumnType("date");

                entity.Property(e => e.Url)
                    .HasColumnName("url")
                    .HasMaxLength(250);

                entity.HasOne(d => d.IdJuegoNavigation)
                    .WithMany(p => p.CatalogoJuegosImagenes)
                    .HasForeignKey(d => d.IdJuego)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_catalogo_juegos_imagenes_catalogo_juegos");
            });

            modelBuilder.Entity<CatalogoJuegosThumbnail>(entity =>
            {
                entity.ToTable("catalogo_juegos_thumbnails");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.CreatedAt)
                    .HasColumnName("created_at")
                    .HasColumnType("date");

                entity.Property(e => e.Height).HasColumnName("height");

                entity.Property(e => e.IdImagen).HasColumnName("id_imagen");

                entity.Property(e => e.ModifiedAt)
                    .HasColumnName("modified_at")
                    .HasColumnType("date");

                entity.Property(e => e.RelativeUrl)
                    .HasColumnName("relative_url")
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.Url)
                    .HasColumnName("url")
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.Width).HasColumnName("width");

                entity.HasOne(d => d.IdImagenNavigation)
                    .WithMany(p => p.CatalogoJuegosThumbnails)
                    .HasForeignKey(d => d.IdImagen)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_catalogo_juegos_thumbnails_catalogo_juegos_imagenes");
            });

            modelBuilder.Entity<CitiesState>(entity =>
            {
                entity.ToTable("cities_state");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.IdState).HasColumnName("id_state");

                entity.Property(e => e.KeyCity)
                    .HasColumnName("key_city")
                    .HasMaxLength(5);

                entity.Property(e => e.NameCity)
                    .IsRequired()
                    .HasColumnName("name_city")
                    .HasMaxLength(50);

                entity.HasOne(d => d.IdStateNavigation)
                    .WithMany(p => p.CitiesStates)
                    .HasForeignKey(d => d.IdState)
                    .HasConstraintName("FK_cities_state_estados_pais");
            });

            modelBuilder.Entity<CoinsUser>(entity =>
            {
                entity.ToTable("coins_users");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Coins).HasColumnName("coins");

                entity.Property(e => e.CreatedAt)
                    .HasColumnName("created_at")
                    .HasColumnType("datetime");

                entity.Property(e => e.IdUsuario)
                    .IsRequired()
                    .HasColumnName("id_usuario")
                    .HasMaxLength(100);

                entity.Property(e => e.UpdatedAt)
                    .HasColumnName("updated_at")
                    .HasColumnType("datetime");
            });

            modelBuilder.Entity<CoinsUserHistory>(entity =>
            {
                entity.ToTable("coins_user_history");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Coins).HasColumnName("coins");

                entity.Property(e => e.CreatedAt)
                    .HasColumnName("created_at")
                    .HasColumnType("datetime");

                entity.Property(e => e.IdType).HasColumnName("id_type");

                entity.Property(e => e.IdUsuario)
                    .IsRequired()
                    .HasColumnName("id_usuario")
                    .HasMaxLength(100);

                entity.Property(e => e.Source).HasColumnName("source");

                entity.HasOne(d => d.IdTypeNavigation)
                    .WithMany(p => p.CoinsUserHistories)
                    .HasForeignKey(d => d.IdType)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_coins_user_history_coins_type_catalog");

                entity.HasOne(d => d.IdUsuarioNavigation)
                    .WithMany(p => p.CoinsUserHistories)
                    .HasForeignKey(d => d.IdUsuario)
                    .HasConstraintName("FK_coins_user_history_datos_usuarios");
            });

            modelBuilder.Entity<DatosUsuario>(entity =>
            {
                entity.HasKey(e => e.IdDatoUsuario);

                entity.ToTable("datos_usuarios");

                entity.Property(e => e.IdDatoUsuario)
                    .HasColumnName("id_dato_usuario")
                    .HasMaxLength(100)
                    .ValueGeneratedNever();

                entity.Property(e => e.DeviceToken)
                    .HasColumnName("device_token")
                    .HasColumnType("text");

                entity.Property(e => e.Direccion)
                    .HasColumnName("direccion")
                    .HasMaxLength(50);

                entity.Property(e => e.Email)
                    .IsRequired()
                    .HasColumnName("email")
                    .HasMaxLength(100);

                entity.Property(e => e.FechaActualizacion)
                    .HasColumnName("fecha_actualizacion")
                    .HasColumnType("datetime");

                entity.Property(e => e.FechaCreacion)
                    .HasColumnName("fecha_creacion")
                    .HasColumnType("datetime");

                entity.Property(e => e.FechaNacimiento)
                    .HasColumnName("fecha_nacimiento")
                    .HasColumnType("datetime");

                entity.Property(e => e.FirstTime).HasColumnName("first_time");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.IdAvatar).HasColumnName("id_avatar");

                entity.Property(e => e.IdCity).HasColumnName("id_city");

                entity.Property(e => e.IdEstado).HasColumnName("id_estado");

                entity.Property(e => e.IdGender).HasColumnName("id_gender");

                entity.Property(e => e.IdUserComplete)
                    .HasColumnName("id_user_complete")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Municipality)
                    .HasColumnName("municipality")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.NombreApellidos)
                    .HasColumnName("nombre_apellidos")
                    .HasMaxLength(250);

                entity.Property(e => e.NombreUsuario)
                    .HasColumnName("nombre_usuario")
                    .HasMaxLength(20);

                entity.Property(e => e.PoliticasPrivacidad).HasColumnName("politicas_privacidad");

                entity.Property(e => e.Status).HasColumnName("status");

                entity.Property(e => e.TerminosCondiciones).HasColumnName("terminos_condiciones");
            });

            modelBuilder.Entity<EstadosPai>(entity =>
            {
                entity.ToTable("estados_pais");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.ClaveEstado)
                    .IsRequired()
                    .HasColumnName("clave_estado")
                    .HasMaxLength(5);

                entity.Property(e => e.IdPais).HasColumnName("id_pais");

                entity.Property(e => e.NombreEstado)
                    .IsRequired()
                    .HasColumnName("nombre_estado")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<ExchangeProductHistory>(entity =>
            {
                entity.ToTable("exchange_product_history");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.CreatedAt)
                    .HasColumnName("created_at")
                    .HasColumnType("datetime");

                entity.Property(e => e.IdProduct).HasColumnName("id_product");

                entity.Property(e => e.IdUser)
                    .IsRequired()
                    .HasColumnName("id_user")
                    .HasMaxLength(100);

                entity.Property(e => e.ValueInTickets).HasColumnName("value_in_tickets");

                entity.HasOne(d => d.IdUserNavigation)
                    .WithMany(p => p.ExchangeProductHistories)
                    .HasForeignKey(d => d.IdUser)
                    .HasConstraintName("FK_exchange_product_history_datos_usuarios");
            });

            modelBuilder.Entity<GenderDb>(entity =>
            {
                entity.ToTable("gender_db");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.KeyGender)
                    .HasColumnName("key_gender")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.NameGender)
                    .IsRequired()
                    .HasColumnName("name_gender")
                    .HasMaxLength(30)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<GustosUsuario>(entity =>
            {
                entity.ToTable("gustos_usuarios");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.IdDatoUsuario)
                    .IsRequired()
                    .HasColumnName("id_dato_usuario")
                    .HasMaxLength(100);

                entity.Property(e => e.IdGusto).HasColumnName("id_gusto");

                entity.HasOne(d => d.IdDatoUsuarioNavigation)
                    .WithMany(p => p.GustosUsuarios)
                    .HasForeignKey(d => d.IdDatoUsuario)
                    .HasConstraintName("FK_gustos_usuarios_gustos_usuarios");
            });

            modelBuilder.Entity<IntentosTrivium>(entity =>
            {
                entity.ToTable("intentos_trivia");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.FechaHora)
                    .HasColumnName("fecha_hora")
                    .HasColumnType("datetime");

                entity.Property(e => e.Gano).HasColumnName("gano");

                entity.Property(e => e.IdTrivia).HasColumnName("id_trivia");

                entity.Property(e => e.IdUsuario)
                    .IsRequired()
                    .HasColumnName("id_usuario")
                    .HasMaxLength(100);

                entity.Property(e => e.Intento).HasColumnName("intento");

                entity.HasOne(d => d.IdUsuarioNavigation)
                    .WithMany(p => p.IntentosTrivia)
                    .HasForeignKey(d => d.IdUsuario)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_intentos_trivia_datos_usuarios");
            });

            modelBuilder.Entity<InteresesTrivia>(entity =>
            {
                entity.ToTable("intereses_trivias");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.CreatedAt)
                    .HasColumnName("created_at")
                    .HasColumnType("datetime");

                entity.Property(e => e.IdTrivia).HasColumnName("id_trivia");

                entity.Property(e => e.IdUser)
                    .IsRequired()
                    .HasColumnName("id_user")
                    .HasMaxLength(100);

                entity.Property(e => e.PublicationDate)
                    .HasColumnName("publication_date")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.IdUserNavigation)
                    .WithMany(p => p.InteresesTrivia)
                    .HasForeignKey(d => d.IdUser)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_intereses_trivias_datos_usuarios");
            });

            modelBuilder.Entity<InterestReward>(entity =>
            {
                entity.ToTable("interest_reward");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.CreatedAt)
                    .HasColumnName("created_at")
                    .HasColumnType("datetime");

                entity.Property(e => e.IdReward).HasColumnName("id_reward");

                entity.Property(e => e.IdUser)
                    .IsRequired()
                    .HasColumnName("id_user")
                    .HasMaxLength(100);

                entity.Property(e => e.PublicationDate)
                    .HasColumnName("publication_date")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.IdUserNavigation)
                    .WithMany(p => p.InterestRewards)
                    .HasForeignKey(d => d.IdUser)
                    .HasConstraintName("FK_interest_reward_datos_usuarios");
            });

            modelBuilder.Entity<JuegosBigScoreUsuarioPartidum>(entity =>
            {
                entity.ToTable("juegos_big_score_usuario_partida");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.CreatedAt)
                    .HasColumnName("created_at")
                    .HasColumnType("datetime");

                entity.Property(e => e.IdPartida).HasColumnName("id_partida");

                entity.Property(e => e.IdUsuario)
                    .IsRequired()
                    .HasColumnName("id_usuario")
                    .HasMaxLength(100);

                entity.Property(e => e.Score).HasColumnName("score");

                entity.Property(e => e.UpdatedAt)
                    .HasColumnName("updated_at")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.IdPartidaNavigation)
                    .WithMany(p => p.JuegosBigScoreUsuarioPartida)
                    .HasForeignKey(d => d.IdPartida)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_juegos_score_usuario_partida_juegos_usuarios_partidas");

                entity.HasOne(d => d.IdUsuarioNavigation)
                    .WithMany(p => p.JuegosBigScoreUsuarioPartida)
                    .HasForeignKey(d => d.IdUsuario)
                    .HasConstraintName("FK_score_usuario_partida_datos_usuarios");
            });

            modelBuilder.Entity<JuegosUsuariosPartida>(entity =>
            {
                entity.ToTable("juegos_usuarios_partidas");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.CreatedAt)
                    .HasColumnName("created_at")
                    .HasColumnType("datetime");

                entity.Property(e => e.IdJuego).HasColumnName("id_juego");

                entity.Property(e => e.IdUsuario)
                    .IsRequired()
                    .HasColumnName("id_usuario")
                    .HasMaxLength(100);

                entity.Property(e => e.Score).HasColumnName("score");

                entity.Property(e => e.UpdatedAt)
                    .HasColumnName("updated_at")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.IdJuegoNavigation)
                    .WithMany(p => p.JuegosUsuariosPartida)
                    .HasForeignKey(d => d.IdJuego)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_partidas_juegos_usuarios_catalogo_juegos");

                entity.HasOne(d => d.IdUsuarioNavigation)
                    .WithMany(p => p.JuegosUsuariosPartida)
                    .HasForeignKey(d => d.IdUsuario)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_juegos_usuarios_partidas_datos_usuarios1");
            });

            modelBuilder.Entity<LogrosUsuario>(entity =>
            {
                entity.ToTable("logros_usuarios");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.CreatedAt)
                    .HasColumnName("created_at")
                    .HasColumnType("datetime");

                entity.Property(e => e.IdDatoUsuario)
                    .IsRequired()
                    .HasColumnName("id_dato_usuario")
                    .HasMaxLength(100);

                entity.Property(e => e.IdLogro).HasColumnName("id_logro");

                entity.Property(e => e.IsSelected).HasColumnName("is_selected");

                entity.HasOne(d => d.IdDatoUsuarioNavigation)
                    .WithMany(p => p.LogrosUsuarios)
                    .HasForeignKey(d => d.IdDatoUsuario)
                    .HasConstraintName("FK_logros_usuarios_datos_usuarios");
            });

            modelBuilder.Entity<Notification>(entity =>
            {
                entity.ToTable("notification");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.CreatedAt)
                    .HasColumnName("created_at")
                    .HasColumnType("datetime");

                entity.Property(e => e.DateRead)
                    .HasColumnName("date_read")
                    .HasColumnType("datetime");

                entity.Property(e => e.DivLink)
                    .HasColumnName("div_link")
                    .HasColumnType("text");

                entity.Property(e => e.Icon)
                    .IsRequired()
                    .HasColumnName("icon")
                    .HasColumnType("text");

                entity.Property(e => e.IdUser)
                    .IsRequired()
                    .HasColumnName("idUser")
                    .HasMaxLength(100);

                entity.Property(e => e.Text)
                    .IsRequired()
                    .HasColumnName("text")
                    .HasColumnType("text");

                entity.Property(e => e.Title)
                    .IsRequired()
                    .HasColumnName("title")
                    .HasColumnType("text");

                entity.Property(e => e.Type)
                    .IsRequired()
                    .HasColumnName("type")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdUserNavigation)
                    .WithMany(p => p.Notifications)
                    .HasForeignKey(d => d.IdUser)
                    .HasConstraintName("FK_notification_datos_usuarios");
            });

            modelBuilder.Entity<Product>(entity =>
            {
                entity.ToTable("Product");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Price)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.HasOne(d => d.ProductCategory)
                    .WithMany(p => p.Products)
                    .HasForeignKey(d => d.ProductCategoryId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Product_ProductCategory");
            });

            modelBuilder.Entity<ProductCategory>(entity =>
            {
                entity.ToTable("ProductCategory");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<RecompensasTriviasHistorial>(entity =>
            {
                entity.ToTable("recompensas_trivias_historial");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Categoria).HasColumnName("categoria");

                entity.Property(e => e.CreatedAt)
                    .HasColumnName("created_at")
                    .HasColumnType("datetime");

                entity.Property(e => e.IdCategoria).HasColumnName("id_categoria");

                entity.Property(e => e.IdIntentoTrivia).HasColumnName("id_intento_trivia");

                entity.Property(e => e.IdRecompensa).HasColumnName("id_recompensa");

                entity.Property(e => e.IdUser)
                    .IsRequired()
                    .HasColumnName("id_user")
                    .HasMaxLength(100);

                entity.HasOne(d => d.IdIntentoTriviaNavigation)
                    .WithMany(p => p.RecompensasTriviasHistorials)
                    .HasForeignKey(d => d.IdIntentoTrivia)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_recompensas_trivias_historial_intentos_trivia");

                entity.HasOne(d => d.IdUserNavigation)
                    .WithMany(p => p.RecompensasTriviasHistorials)
                    .HasForeignKey(d => d.IdUser)
                    .HasConstraintName("FK_recompensas_trivias_historial_datos_usuarios");
            });

            modelBuilder.Entity<RespuestasIntentoTrivium>(entity =>
            {
                entity.ToTable("respuestas_intento_trivia");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Correcta).HasColumnName("correcta");

                entity.Property(e => e.IdIntentoTrivia).HasColumnName("id_intento_trivia");

                entity.Property(e => e.PreguntaId).HasColumnName("pregunta_id");

                entity.Property(e => e.Respuesta)
                    .IsRequired()
                    .HasColumnName("respuesta")
                    .HasMaxLength(1000);

                entity.HasOne(d => d.IdIntentoTriviaNavigation)
                    .WithMany(p => p.RespuestasIntentoTrivia)
                    .HasForeignKey(d => d.IdIntentoTrivia)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_respuestas_intento_trivia_intentos_trivia");
            });

            modelBuilder.Entity<ScannCodebarHistory>(entity =>
            {
                entity.ToTable("scann_codebar_history");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.CodebarProduct)
                    .IsRequired()
                    .HasColumnName("codebar_product")
                    .HasMaxLength(100);

                entity.Property(e => e.CoinsNumber).HasColumnName("coins_number");

                entity.Property(e => e.Date).HasColumnName("date");

                entity.Property(e => e.IdTarjet).HasColumnName("id_tarjet");

                entity.Property(e => e.IdTypeEventScannImg).HasColumnName("id_type_event_scann_img");

                entity.Property(e => e.Idusr)
                    .IsRequired()
                    .HasColumnName("idusr")
                    .HasMaxLength(100);

                entity.HasOne(d => d.IdTypeEventScannImgNavigation)
                    .WithMany(p => p.ScannCodebarHistories)
                    .HasForeignKey(d => d.IdTypeEventScannImg)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_scann_codebar_history_type_event_scann_img");

                entity.HasOne(d => d.IdusrNavigation)
                    .WithMany(p => p.ScannCodebarHistories)
                    .HasForeignKey(d => d.Idusr)
                    .HasConstraintName("FK_scann_codebar_history_datos_usuarios");
            });

            modelBuilder.Entity<ScannImgHistory>(entity =>
            {
                entity.ToTable("scann_img_history");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.CoinsNumber).HasColumnName("coins_number");

                entity.Property(e => e.Date).HasColumnName("date");

                entity.Property(e => e.IdBrandProduct).HasColumnName("id_brand_product");

                entity.Property(e => e.IdTarjet).HasColumnName("id_tarjet");

                entity.Property(e => e.IdTypeEventScannImg).HasColumnName("id_type_event_scann_img");

                entity.Property(e => e.Idusr)
                    .IsRequired()
                    .HasColumnName("idusr")
                    .HasMaxLength(100);

                entity.HasOne(d => d.IdTypeEventScannImgNavigation)
                    .WithMany(p => p.ScannImgHistories)
                    .HasForeignKey(d => d.IdTypeEventScannImg)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_scann_img_history_type_event_scann_img");

                entity.HasOne(d => d.IdusrNavigation)
                    .WithMany(p => p.ScannImgHistories)
                    .HasForeignKey(d => d.Idusr)
                    .HasConstraintName("FK_scann_img_history_datos_usuarios");
            });

            modelBuilder.Entity<Session>(entity =>
            {
                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Token)
                    .HasColumnName("token")
                    .HasColumnType("text");

                entity.Property(e => e.UserId).HasColumnName("user_id");
            });

            modelBuilder.Entity<TicketsUser>(entity =>
            {
                entity.ToTable("tickets_users");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.CreatedAt)
                    .HasColumnName("created_at")
                    .HasColumnType("datetime");

                entity.Property(e => e.IdUsuario)
                    .IsRequired()
                    .HasColumnName("id_usuario")
                    .HasMaxLength(100);

                entity.Property(e => e.Tickets).HasColumnName("tickets");

                entity.Property(e => e.UpdatedAt)
                    .HasColumnName("updated_at")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.IdUsuarioNavigation)
                    .WithMany(p => p.TicketsUsers)
                    .HasForeignKey(d => d.IdUsuario)
                    .HasConstraintName("FK_tickets_users_datos_usuarios");
            });

            modelBuilder.Entity<TicketsUserHistory>(entity =>
            {
                entity.ToTable("tickets_user_history");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.CreatedAt)
                    .HasColumnName("created_at")
                    .HasColumnType("datetime");

                entity.Property(e => e.IdType).HasColumnName("id_type");

                entity.Property(e => e.IdUser)
                    .IsRequired()
                    .HasColumnName("id_user")
                    .HasMaxLength(100);

                entity.Property(e => e.Source).HasColumnName("source");

                entity.Property(e => e.Tickets).HasColumnName("tickets");

                entity.HasOne(d => d.IdTypeNavigation)
                    .WithMany(p => p.TicketsUserHistories)
                    .HasForeignKey(d => d.IdType)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tickets_user_history_type_transaction_catalog");

                entity.HasOne(d => d.IdUserNavigation)
                    .WithMany(p => p.TicketsUserHistories)
                    .HasForeignKey(d => d.IdUser)
                    .HasConstraintName("FK_tickets_user_history_datos_usuarios");
            });

            modelBuilder.Entity<TypeEventScannImg>(entity =>
            {
                entity.ToTable("type_event_scann_img");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Description)
                    .HasColumnName("description")
                    .HasMaxLength(20);

                entity.Property(e => e.WaitingDays).HasColumnName("waiting_days");
            });

            modelBuilder.Entity<TypeTransactionCatalog>(entity =>
            {
                entity.ToTable("type_transaction_catalog");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasColumnName("description")
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<UsersMessage>(entity =>
            {
                entity.ToTable("users_messages");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.CreatedAt)
                    .HasColumnName("created_at")
                    .HasColumnType("datetime");

                entity.Property(e => e.IdDatoUsuario)
                    .IsRequired()
                    .HasColumnName("id_dato_usuario")
                    .HasMaxLength(100);

                entity.Property(e => e.Text)
                    .IsRequired()
                    .HasColumnName("text")
                    .HasColumnType("text");

                entity.HasOne(d => d.IdDatoUsuarioNavigation)
                    .WithMany(p => p.UsersMessages)
                    .HasForeignKey(d => d.IdDatoUsuario)
                    .HasConstraintName("FK_tbl_users_messager_datos_usuarios");
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}